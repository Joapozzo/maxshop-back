generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model negocio {
  id_neg           Int     @id @default(autoincrement())
  nombre           String? @db.VarChar(255)
  direccion        String? @db.VarChar(255)
  logo             String? @db.VarChar(255)
  telefono         String? @db.VarChar(50)
  cuit             String? @db.VarChar(50)
  cond_iva         String? @db.VarChar(100)
  email            String? @db.VarChar(255)
  color_primario   String? @db.VarChar(20)
  color_secundario String? @db.VarChar(20)
  token_pago       String? @db.VarChar(255)
  token_envio      String? @db.VarChar(255)
}

model roles {
  id_rol      Int        @id @default(autoincrement())
  nombre      String?    @db.VarChar(100)
  descripcion String?    @db.VarChar(255)
  usuarios    usuarios[]
}

model usuarios {
  id_usuario     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre         String?     @db.VarChar(100)
  apellido       String?     @db.VarChar(100)
  email          String?     @db.VarChar(255)
  telefono       Int?
  username       String?     @db.VarChar(100)
  password       String?     @db.VarChar(255)
  id_rol         Int?
  estado         Int?
  creado_en      DateTime?   @default(now()) @db.Timestamp(6)
  actualizado_en DateTime?   @default(now()) @db.Timestamp(6)
  img            String?     @db.VarChar(255)
  ultimo_login   DateTime?   @db.Timestamp(6)
  login_ip       String?     @db.VarChar(50)
  nacimiento     DateTime?   @db.Date
  token          String?     @db.Uuid
  token_expira   DateTime?   @db.Timestamp(6)
  admin          admin?
  auditoria      auditoria[]
  cliente        cliente?
  roles          roles?      @relation(fields: [id_rol], references: [id_rol], onDelete: NoAction, onUpdate: NoAction)
  venta_usuario  venta[]     @relation("venta_usuario")

  @@index([email], map: "idx_usuarios_email")
  @@index([username], map: "idx_usuarios_username")
}

model admin {
  id_admin   String?  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_usuario String   @id @db.Uuid
  usuarios   usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction)
}

model cliente {
  id_cliente    String?  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_usuario    String   @id @db.Uuid
  direccion     String?  @db.VarChar(255)
  cod_postal    Int?
  ciudad        String?  @db.VarChar(100)
  provincia     String?  @db.VarChar(100)
  usuarios      usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction)
  venta_cliente venta[]  @relation("venta_cliente")
}

model categoria {
  id_cat       Int            @id @default(autoincrement())
  nombre       String?        @db.VarChar(100)
  descripcion  String?        @db.VarChar(255)
  subcategoria subcategoria[]
}

model iva {
  id_iva      Int         @id @default(autoincrement())
  nombre      String?     @db.VarChar(100)
  descripcion String?     @db.VarChar(255)
  productos   productos[]
}

model marca {
  id_marca    Int         @id @default(autoincrement())
  nombre      String?     @db.VarChar(100)
  descripcion String?     @db.VarChar(255)
  productos   productos[]
}

model productos {
  id_prod          Int             @id @default(autoincrement())
  id_subcat        Int?
  id_interno       String?         @db.VarChar(100)
  cod_sku          String?         @db.VarChar(100)
  nombre           String?         @db.VarChar(255)
  descripcion      String?
  modelo           String?         @db.VarChar(100)
  id_marca         Int?
  precio_mayorista Decimal?        @db.Decimal(10, 2)
  precio_minorista Decimal?        @db.Decimal(10, 2)
  precio_evento    Decimal?        @db.Decimal(10, 2)
  precio           Decimal?        @db.Decimal(10, 2)
  id_iva           Int?
  stock            Int?
  stock_min        Int?
  stock_mayorista  Int?
  img_principal    String?         @db.VarChar(255)
  imagenes         Json?
  destacado        Boolean?        @default(false)
  financiacion     Boolean?        @default(false)
  creado_en        DateTime?       @default(now()) @db.Timestamp(6)
  actualizado_en   DateTime?       @default(now()) @db.Timestamp(6)
  estado           Int?
  iva              iva?            @relation(fields: [id_iva], references: [id_iva], onDelete: NoAction, onUpdate: NoAction)
  marca            marca?          @relation(fields: [id_marca], references: [id_marca], onDelete: NoAction, onUpdate: NoAction)
  subcategoria     subcategoria?   @relation(fields: [id_subcat], references: [id_subcat], onDelete: NoAction, onUpdate: NoAction)
  venta_detalle    venta_detalle[]

  @@index([id_subcat], map: "idx_productos_categoria")
  @@index([nombre], map: "idx_productos_nombre")
}

model eventos {
  id_evento      Int             @id @default(autoincrement())
  nombre         String?         @db.VarChar(255)
  descripcion    String?
  fecha_inicio   DateTime?       @db.Timestamp(6)
  fecha_fin      DateTime?       @db.Timestamp(6)
  tipo_descuento String?         @db.VarChar(50)
  banner_img     String?         @db.VarChar(255)
  color_tema     String?         @db.VarChar(20)
  activo         Boolean?        @default(true)
  creado_en      DateTime?       @default(now()) @db.Timestamp(6)
  url_publica    String?         @db.VarChar(255)
  reglas_evento  reglas_evento[]
  venta_detalle  venta_detalle[]
}

model auditoria {
  id_aud               Int       @id @default(autoincrement())
  id_usuario           String?   @db.Uuid
  fecha                DateTime? @default(now()) @db.Timestamp(6)
  accion               String?   @db.VarChar(100)
  tabla_afectada       String?   @db.VarChar(100)
  dato_anterior        Json?
  dato_despues         Json?
  user_agent           String?   @db.VarChar(255)
  endpoint             String?   @db.VarChar(255)
  estado               String?   @db.VarChar(50)
  descripcion          String?   @db.VarChar(255)
  tiempo_procesamiento Int?
  usuarios             usuarios? @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)

  @@index([fecha], map: "idx_auditoria_fecha")
  @@index([id_usuario], map: "idx_auditoria_usuario")
}

model venta {
  id_venta        Int             @id @default(autoincrement())
  id_usuario      String?         @db.Uuid
  fecha           DateTime?       @default(now()) @db.Timestamp(6)
  id_cliente      String?         @db.Uuid
  total_sin_iva   Decimal?        @db.Decimal(10, 2)
  total_con_iva   Decimal?        @db.Decimal(10, 2)
  descuento_total Decimal?        @db.Decimal(10, 2)
  total_neto      Decimal?        @db.Decimal(10, 2)
  metodo_pago     String?         @db.VarChar(50)
  estado_pago     String?         @db.VarChar(50)
  estado_envio    String?         @db.VarChar(50)
  id_envio        String?         @db.Uuid
  tipo_venta      String?         @db.VarChar(50)
  observaciones   String?
  factura_url     String?         @db.VarChar(255)
  creado_en       DateTime?       @default(now()) @db.Timestamp(6)
  actualizado_en  DateTime?       @default(now()) @db.Timestamp(6)
  envios          envios[]
  cliente         cliente?        @relation("venta_cliente", fields: [id_cliente], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  usuario         usuarios?       @relation("venta_usuario", fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  venta_detalle   venta_detalle[]

  @@index([id_cliente], map: "idx_venta_cliente")
  @@index([fecha], map: "idx_venta_fecha")
}

model envios {
  id_envio        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_venta        Int?
  empresa_envio   String?   @db.VarChar(100)
  cod_seguimiento String?   @db.VarChar(100)
  estado_envio    String?   @db.VarChar(50)
  costo_envio     Decimal?  @db.Decimal(10, 2)
  direccion_envio String?   @db.VarChar(255)
  fecha_envio     DateTime? @db.Timestamp(6)
  fecha_entrega   DateTime? @db.Timestamp(6)
  observaciones   String?
  venta           venta?    @relation(fields: [id_venta], references: [id_venta], onDelete: NoAction, onUpdate: NoAction)
}

model reglas_contenido {
  id_contenido  Int?
  id_regla      Int           @id(map: "Reglas-Contenido_pkey") @default(autoincrement())
  tipo_objetivo String?       @db.VarChar(50)
  id_objetivo   Int?
  reglas_evento reglas_evento @relation(fields: [id_regla], references: [id_regla], onDelete: NoAction, onUpdate: NoAction, map: "Reglas-Contenido_id_regla_fkey")

  @@map("reglas-contenido")
}

model reglas_evento {
  id_regla         Int               @id(map: "Reglas-Evento_pkey") @default(autoincrement())
  id_evento        Int?
  tipo_desc        String?           @db.VarChar(50)
  valor_desc       Decimal?          @db.Decimal(10, 2)
  desc_regla       String?           @db.VarChar(255)
  condicion_extra  Json?
  activo           Boolean?          @default(true)
  creado_en        DateTime?         @default(now()) @db.Timestamp(6)
  reglas_contenido reglas_contenido?
  eventos          eventos?          @relation(fields: [id_evento], references: [id_evento], onDelete: NoAction, onUpdate: NoAction, map: "Reglas-Evento_id_evento_fkey")

  @@map("reglas-evento")
}

model venta_detalle {
  id_detalle         Int        @id(map: "Venta-detalle_pkey") @default(autoincrement())
  id_venta           Int?
  id_prod            Int?
  cantidad           Int?
  precio_unitario    Decimal?   @db.Decimal(10, 2)
  descuento_aplicado Decimal?   @db.Decimal(10, 2)
  sub_total          Decimal?   @db.Decimal(10, 2)
  evento_aplicado    Int?
  tipo_descuento     String?    @db.VarChar(50)
  eventos            eventos?   @relation(fields: [evento_aplicado], references: [id_evento], onDelete: NoAction, onUpdate: NoAction, map: "Venta-detalle_evento_aplicado_fkey")
  productos          productos? @relation(fields: [id_prod], references: [id_prod], onDelete: NoAction, onUpdate: NoAction, map: "Venta-detalle_id_prod_fkey")
  venta              venta?     @relation(fields: [id_venta], references: [id_venta], onDelete: NoAction, onUpdate: NoAction, map: "Venta-detalle_id_venta_fkey")

  @@map("venta-detalle")
}

model subcategoria {
  id_subcat   Int         @id(map: "Sub-categoria_pkey") @default(autoincrement())
  id_cat      Int?
  nombre      String?     @db.VarChar(100)
  descripcion String?     @db.VarChar(255)
  productos   productos[]
  categoria   categoria?  @relation(fields: [id_cat], references: [id_cat], onDelete: NoAction, onUpdate: NoAction, map: "Sub-categoria_id_cat_fkey")
}
